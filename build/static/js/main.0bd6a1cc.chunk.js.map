{"version":3,"sources":["Timer.js","index.js"],"names":["Text","TimerContent","props","time","status","handleClick","handleInputChange","handleClickChangeGap","handleClickInit","hh","parseInt","mm","ss","h","m","s","className","mark","style","fontSize","type","danger","marginTop","onClick","onChange","e","target","value","Timer","timer","state","gap","stop","this","bind","console","log","setState","clearInterval","fun_timer","val","inputValue","setTimeout","setInterval","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAIQA,G,WAAAA,MAEFC,EAAe,SAACC,GAAW,IACrBC,EAAwFD,EAAxFC,KAAMC,EAAkFF,EAAlFE,OAAQC,EAA0EH,EAA1EG,YAAaC,EAA6DJ,EAA7DI,kBAAmBC,EAA0CL,EAA1CK,qBAAsBC,EAAoBN,EAApBM,gBAGtEC,EAAKC,SAASP,EAAO,MACrBQ,EAAKD,UAAUP,EAAY,KAALM,GAAa,IACnCG,EAAKT,EAAY,KAALM,EAAiB,GAALE,EAC1BE,EAAIJ,EAAK,GAAL,WAAcA,GAAOA,EACzBK,EAAIH,EAAK,GAAL,WAAcA,GAAOA,EACzBI,EAAIH,EAAK,GAAL,WAAcA,GAAOA,EAE7B,OAAO,yBAAKI,UAAU,WAClB,kBAAChB,EAAD,CAAMiB,MAAI,EAACC,MAAO,CAAEC,SAAU,SAAWN,EAAI,IAAMC,EAAI,IAAMC,GAC7D,uBAAQK,KAAK,UAAUC,QAAM,EAACH,MAAO,CAAEI,UAAW,QAAUC,QAASlB,GAAcD,GACnF,6BACA,uBAAOoB,SAAU,SAACC,GAAQnB,EAAkBmB,EAAEC,OAAOC,UACrD,uBAAQP,KAAK,UAAUF,MAAO,CAAEI,UAAW,QAAUC,QAAShB,GAA9D,gEACA,uBAAQa,KAAK,UAAUF,MAAO,CAAEI,UAAW,QAAUC,QAASf,GAA9D,kBA+HOoB,E,kDAtHX,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IAHV2B,MAAQ,KAIJ,EAAKC,MAAQ,CACT3B,KAAM,EACN4B,IAAK,IACLC,MAAM,EACN5B,OAAQ,gBANG,E,qDAWf,OACI,kBAAC,EAAD,CACID,KAAM8B,KAAKH,MAAM3B,KACjB4B,IAAKE,KAAKH,MAAMC,IAChBC,KAAMC,KAAKH,MAAME,KACjB5B,OAAQ6B,KAAKH,MAAM1B,OACnBC,YAAa4B,KAAK5B,YAAY6B,KAAKD,MACnC3B,kBAAmB2B,KAAK3B,kBAAkB4B,KAAKD,MAC/C1B,qBAAsB0B,KAAK1B,qBAAqB2B,KAAKD,MACrDzB,gBAAiByB,KAAKzB,gBAAgB0B,KAAKD,U,oCAMnD,IAAMD,GAAQC,KAAKH,MAAME,KACzBG,QAAQC,IAAIJ,GACZC,KAAKI,SAAS,CACVL,KAAMA,EACN5B,OAAQ4B,EAAO,eAAO,iBAEtBA,EACAM,cAAcL,KAAKJ,OAEnBI,KAAKM,c,wCAIKC,GACdP,KAAKI,SAAS,CACVI,WAAYD,M,6CAII,IAAD,OACnBP,KAAKI,SAAS,CACVN,IAAKE,KAAKH,MAAMW,aAEpBH,cAAcL,KAAKJ,OACnBa,YAAW,WACP,EAAKH,cACN,O,wCAGY,IAAD,OACdN,KAAKI,SAAS,CACVlC,KAAM,EACN4B,IAAK,IACLC,MAAM,EACN5B,OAAQ,iBAEZkC,cAAcL,KAAKJ,OACnBa,YAAW,WACP,EAAKH,cACN,O,kCAGM,IAAD,OACRN,KAAKJ,MAAQc,aAAY,WACrB,EAAKN,SAAS,CACVlC,KAAM,EAAK2B,MAAM3B,KAAO,EAAK2B,MAAMC,IAAM,QAE9CE,KAAKH,MAAMC,O,kDAOdI,QAAQC,IAAI,wB,0CAIZD,QAAQC,IAAI,qBACZH,KAAKM,c,8CAOL,OAFAJ,QAAQC,IAAI,0BAEL,I,mDASPD,QAAQC,IAAI,yB,yDASZD,QAAQC,IAAI,qC,6CAKZD,QAAQC,IAAI,kC,GAvHAQ,aCtBpBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.0bd6a1cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Input, Typography } from 'antd'\r\nimport './App.css'\r\n\r\nconst { Text } = Typography;\r\n\r\nconst TimerContent = (props) => {\r\n    const { time, status, handleClick, handleInputChange, handleClickChangeGap, handleClickInit } = props\r\n\r\n    //时间初始化\r\n    const hh = parseInt(time / 3600)\r\n    const mm = parseInt((time - hh * 3600) / 60)\r\n    const ss = time - hh * 3600 - mm * 60\r\n    var h = hh < 10 ? `0${hh}` : hh\r\n    var m = mm < 10 ? `0${mm}` : mm\r\n    var s = ss < 10 ? `0${ss}` : ss\r\n\r\n    return <div className=\"content\">\r\n        <Text mark style={{ fontSize: '20px' }}>{h + \":\" + m + \":\" + s}</Text>\r\n        <Button type=\"primary\" danger style={{ marginTop: '20px' }} onClick={handleClick}>{status}</Button>\r\n        <br />\r\n        <Input onChange={(e) => { handleInputChange(e.target.value) }} />\r\n        <Button type=\"primary\" style={{ marginTop: '20px' }} onClick={handleClickChangeGap}>更改时间间隔（毫秒）</Button>\r\n        <Button type=\"primary\" style={{ marginTop: '20px' }} onClick={handleClickInit}>复位</Button>\r\n    </div>\r\n\r\n};\r\n\r\nclass Timer extends Component {\r\n\r\n    timer = null\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            time: 0,\r\n            gap: 1000,\r\n            stop: false,\r\n            status: '暂停'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TimerContent\r\n                time={this.state.time}\r\n                gap={this.state.gap}\r\n                stop={this.state.stop}\r\n                status={this.state.status}\r\n                handleClick={this.handleClick.bind(this)}\r\n                handleInputChange={this.handleInputChange.bind(this)}\r\n                handleClickChangeGap={this.handleClickChangeGap.bind(this)}\r\n                handleClickInit={this.handleClickInit.bind(this)}\r\n            />\r\n        )\r\n    }\r\n    //点击开始暂停按钮\r\n    handleClick() {\r\n        const stop = !this.state.stop\r\n        console.log(stop)\r\n        this.setState({\r\n            stop: stop,\r\n            status: stop ? \"开始\" : \"暂停\"\r\n        })\r\n        if (stop) {\r\n            clearInterval(this.timer)\r\n        } else {\r\n            this.fun_timer()\r\n        }\r\n    }\r\n    //文本框监听\r\n    handleInputChange(val) {\r\n        this.setState({\r\n            inputValue: val\r\n        })\r\n    }\r\n    //改变时间间隔\r\n    handleClickChangeGap() {\r\n        this.setState({\r\n            gap: this.state.inputValue\r\n        })\r\n        clearInterval(this.timer)\r\n        setTimeout(() => {\r\n            this.fun_timer()\r\n        }, 500)\r\n    }\r\n    //复位\r\n    handleClickInit() {\r\n        this.setState({\r\n            time: 0,\r\n            gap: 1000,\r\n            stop: false,\r\n            status: '暂停'\r\n        })\r\n        clearInterval(this.timer)\r\n        setTimeout(() => {\r\n            this.fun_timer()\r\n        }, 500)\r\n    }\r\n    //开始计时\r\n    fun_timer() {\r\n        this.timer = setInterval(() => {\r\n            this.setState({\r\n                time: this.state.time + this.state.gap / 1000,\r\n            })\r\n        }, this.state.gap)\r\n    }\r\n\r\n\r\n\r\n    //组件即将被挂载到页面的时候自动执行\r\n    UNSAFE_componentWillMount() {\r\n        console.log('componentWillMount')\r\n    }\r\n    //组件被挂载到页面后自动执行\r\n    componentDidMount() {\r\n        console.log('componentDidMount')\r\n        this.fun_timer()\r\n\r\n    }\r\n    //组件被更新之前，他会自动被执行\r\n    shouldComponentUpdate() {\r\n        console.log('shouldComponentUpdate')\r\n        // return !this.state.stop\r\n        return true\r\n\r\n    }\r\n    /**\r\n     * 组件被更新之前，它会自动执行，但是他在shouldComponentUpdate之后才会执行\r\n     * 如果shouldComponentUpdate返回true它才执行\r\n     * 如果返回false，这个函数就不会被执行了\r\n     */\r\n    UNSAFE_componentWillUpdate() {\r\n        console.log('componentWillUpdate')\r\n\r\n    }\r\n    /**\r\n     * 一个组件从父组件接受参数\r\n     * 如果这个组件第一次存在于父组件中，不会执行\r\n     * 如果这个组件之前就已经存在父组件中，才会执行\r\n     */\r\n    UNSAFE_componentWillReceiveProps() {\r\n        console.log('child componentWillReceiveProps')\r\n    }\r\n\r\n    //当这个组件即将从页面中剔除的时候，会被执行\r\n    componentWillUnmount() {\r\n        console.log('child componentWillUnmount')\r\n    }\r\n}\r\nexport default Timer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Timer from './Timer'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}